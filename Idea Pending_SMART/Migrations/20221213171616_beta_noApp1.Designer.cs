// <auto-generated />
using System;
using Idea_Pending_SMART.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Idea_Pending_SMART.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221213171616_beta_noApp1")]
    partial class beta_noApp1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Idea_Pending_SMART.Models.Applicant", b =>
                {
                    b.Property<int>("ApplicantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicantID"), 1L, 1);

                    b.Property<string>("AppStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicantID");

                    b.ToTable("Applicant");
                });

            modelBuilder.Entity("Idea_Pending_SMART.Models.Application", b =>
                {
                    b.Property<int>("ApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationID"), 1L, 1);

                    b.Property<float?>("AdminScore")
                        .HasColumnType("real");

                    b.Property<string>("ApplicationNameFirst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationNameLast")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ChoppaTransportNeeded")
                        .HasColumnType("bit");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeterminationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistanceNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Financials")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("GPA")
                        .HasColumnType("real");

                    b.Property<float?>("InitialScore")
                        .HasColumnType("real");

                    b.Property<bool>("MealsNeeded")
                        .HasColumnType("bit");

                    b.Property<string>("SubmissionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("TotalScore")
                        .HasColumnType("real");

                    b.HasKey("ApplicationID");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Idea_Pending_SMART.Models.Assignment", b =>
                {
                    b.Property<int>("AssignmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentID"), 1L, 1);

                    b.Property<DateTime?>("AssignmentDueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AssignmentIssuetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssignmentTotalMarks")
                        .HasColumnType("int");

                    b.HasKey("AssignmentID");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("Idea_Pending_SMART.Models.Attendance", b =>
                {
                    b.Property<int>("AttendanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceID"), 1L, 1);

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("EnrollmentID")
                        .HasColumnType("int");

                    b.Property<string>("MealEaten")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool?>("MealProvided")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("class_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("student_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttendanceID");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("Idea_Pending_SMART.Models.Class", b =>
                {
                    b.Property<int>("ClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassID"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClassTimeID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("SemesterID")
                        .HasColumnType("int");

                    b.Property<int>("Studentcount")
                        .HasColumnType("int");

                    b.HasKey("ClassID");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ClassTimeID");

                    b.HasIndex("CourseID");

                    b.HasIndex("SemesterID");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("Idea_Pending_SMART.Models.ClassTime", b =>
                {
                    b.Property<int>("ClassTimeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassTimeID"), 1L, 1);

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassTimeID");

                    b.ToTable("ClassTimes");
                });

            modelBuilder.Entity("Idea_Pending_SMART.Models.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseID"), 1L, 1);

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("CourseID");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Idea_Pending_SMART.Models.Enrollment", b =>
                {
                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<int>("EnrollmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentID"), 1L, 1);

                    b.HasKey("StudentID", "ClassID");

                    b.HasIndex("ClassID");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("Idea_Pending_SMART.Models.Permissions", b =>
                {
                    b.Property<int>("PermissionsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionsID"), 1L, 1);

                    b.Property<string>("PermissionsName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermissionsID");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermissionsID = 1,
                            PermissionsName = "CanEditUsers"
                        },
                        new
                        {
                            PermissionsID = 2,
                            PermissionsName = "CanViewApplications"
                        },
                        new
                        {
                            PermissionsID = 3,
                            PermissionsName = "CanEditApplications"
                        },
                        new
                        {
                            PermissionsID = 4,
                            PermissionsName = "CanReviewApplications"
                        },
                        new
                        {
                            PermissionsID = 5,
                            PermissionsName = "CanEditRoles"
                        },
                        new
                        {
                            PermissionsID = 6,
                            PermissionsName = "CanViewSemesters"
                        },
                        new
                        {
                            PermissionsID = 7,
                            PermissionsName = "CanEditSemesters"
                        },
                        new
                        {
                            PermissionsID = 8,
                            PermissionsName = "CanCreateSemesters"
                        },
                        new
                        {
                            PermissionsID = 9,
                            PermissionsName = "CanSocialworkerStuff"
                        },
                        new
                        {
                            PermissionsID = 10,
                            PermissionsName = "CanInstructorStuff"
                        });
                });

            modelBuilder.Entity("Idea_Pending_SMART.Models.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonID"), 1L, 1);

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressGPSLatitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressGPSLongitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApartmentNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonID");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Idea_Pending_SMART.Models.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("IdentityRoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PermissionsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdentityRoleId");

                    b.HasIndex("PermissionsId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdentityRoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            PermissionsId = 1
                        },
                        new
                        {
                            Id = 2,
                            IdentityRoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            PermissionsId = 2
                        },
                        new
                        {
                            Id = 3,
                            IdentityRoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            PermissionsId = 3
                        },
                        new
                        {
                            Id = 4,
                            IdentityRoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            PermissionsId = 4
                        },
                        new
                        {
                            Id = 5,
                            IdentityRoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211",
                            PermissionsId = 1
                        },
                        new
                        {
                            Id = 6,
                            IdentityRoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211",
                            PermissionsId = 2
                        },
                        new
                        {
                            Id = 7,
                            IdentityRoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211",
                            PermissionsId = 3
                        },
                        new
                        {
                            Id = 8,
                            IdentityRoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211",
                            PermissionsId = 4
                        },
                        new
                        {
                            Id = 9,
                            IdentityRoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212",
                            PermissionsId = 1
                        },
                        new
                        {
                            Id = 10,
                            IdentityRoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212",
                            PermissionsId = 2
                        },
                        new
                        {
                            Id = 11,
                            IdentityRoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212",
                            PermissionsId = 3
                        },
                        new
                        {
                            Id = 12,
                            IdentityRoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212",
                            PermissionsId = 4
                        },
                        new
                        {
                            Id = 13,
                            IdentityRoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            PermissionsId = 5
                        },
                        new
                        {
                            Id = 14,
                            IdentityRoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            PermissionsId = 6
                        },
                        new
                        {
                            Id = 15,
                            IdentityRoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            PermissionsId = 7
                        },
                        new
                        {
                            Id = 16,
                            IdentityRoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            PermissionsId = 8
                        },
                        new
                        {
                            Id = 17,
                            IdentityRoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211",
                            PermissionsId = 9
                        },
                        new
                        {
                            Id = 18,
                            IdentityRoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212",
                            PermissionsId = 10
                        });
                });

            modelBuilder.Entity("Idea_Pending_SMART.Models.School", b =>
                {
                    b.Property<int>("SchoolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolID"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolID");

                    b.ToTable("School");
                });

            modelBuilder.Entity("Idea_Pending_SMART.Models.Semester", b =>
                {
                    b.Property<int>("SemesterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SemesterID"), 1L, 1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActiveSemester")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxStudentCount")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("SemesterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SemesterID");

                    b.HasIndex("SchoolId");

                    b.ToTable("Semester");
                });

            modelBuilder.Entity("Idea_Pending_SMART.Models.Sponsor", b =>
                {
                    b.Property<int>("SponsorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SponsorID"), 1L, 1);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DonationTotal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.HasKey("SponsorID");

                    b.ToTable("Sponsor");
                });

            modelBuilder.Entity("Idea_Pending_SMART.Models.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentID"), 1L, 1);

                    b.Property<float?>("AcademicScore")
                        .HasColumnType("real");

                    b.Property<int?>("AdminScore")
                        .HasColumnType("int");

                    b.Property<int>("ApplicantID")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationNameFirst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationNameLast")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ChoppaTransportNeeded")
                        .HasColumnType("bit");

                    b.Property<string>("CurrentGrade")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeterminationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistanceNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Financials")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("GPA")
                        .HasColumnType("real");

                    b.Property<int?>("InstructorScore")
                        .HasColumnType("int");

                    b.Property<bool>("MealsNeeded")
                        .HasColumnType("bit");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<int?>("SocialWorkerScore")
                        .HasColumnType("int");

                    b.Property<int?>("SponsorID")
                        .HasColumnType("int");

                    b.Property<string>("SubmissionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalScore")
                        .HasColumnType("int");

                    b.Property<bool?>("timeAvailable")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.HasKey("StudentID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Idea_Pending_SMART.Models.StudentNote", b =>
                {
                    b.Property<int>("StudentNoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentNoteID"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentNoteID");

                    b.ToTable("StudentNote");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "707c3527-9137-4ebf-a295-d3dc6eee1ea8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7211",
                            ConcurrencyStamp = "0adf7f80-4474-4559-8d7f-367c468be8d7",
                            Name = "SocialWorker",
                            NormalizedName = "SOCIALWORKER"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7212",
                            ConcurrencyStamp = "7cec9971-1acc-41fc-b448-bc5dade6c341",
                            Name = "Instructor",
                            NormalizedName = "INSTRUCTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb8",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb7",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb6",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb5",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Idea_Pending_SMART.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Income")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Military")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Race")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Residence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c9b837c-ec12-48c9-851a-75e780d76f7f",
                            Email = "Admin@Admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFxjwbzBsjNEuXu/zJe1QjTPSEgzSh/TNLPtoXxfLMFkQgup/+07IMOX8J1MzS4U9Q==",
                            PhoneNumber = "800calladmin",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d4fb098-23b1-4219-8b4c-c146830ede28",
                            TwoFactorEnabled = false,
                            UserName = "Admin@Admin.com",
                            Address = "123 Flicka Flacka Way",
                            ApplicationUserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            BirthDate = new DateTime(2022, 12, 13, 10, 16, 16, 709, DateTimeKind.Local).AddTicks(4511),
                            City = "Jonestown",
                            County = "Davis",
                            Education = "",
                            FirstName = "Hank",
                            Gender = "",
                            Income = "",
                            LastName = "Hill",
                            Military = "",
                            PostalCode = "84040",
                            Race = "",
                            Residence = "",
                            State = "Texas",
                            StreetAddress = "123 Flicka Flacka Way",
                            Zip = "84040"
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "abce28a0-6f15-46f2-b804-8fabedff0a22",
                            Email = "SocialWorker1@SocialWorker1.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SOCIALWORKER1@SOCIALWORKER1.COM",
                            NormalizedUserName = "SocialWorker1SocialWorker1.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEHiSuMmHMbyH5TbZR9gng7XAnEV0WRowzvThU5wou94fcVoIWbnosBIDu98e7mIWNw==",
                            PhoneNumber = "800calladmin",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d4fb098-23b1-4219-8b4c-c146830ede28",
                            TwoFactorEnabled = false,
                            UserName = "SocialWorker1SocialWorker1.com",
                            Address = "1234423312 Flicka Flacka Way",
                            ApplicationUserId = "8e445865-a24d-4543-a6c6-9443d048cdb8",
                            BirthDate = new DateTime(2022, 12, 13, 10, 16, 16, 710, DateTimeKind.Local).AddTicks(7268),
                            City = "Jonestown22",
                            County = "111111Davis",
                            Education = "",
                            FirstName = "Bob",
                            Gender = "",
                            Income = "",
                            LastName = "Propane",
                            Military = "",
                            PostalCode = "84040",
                            Race = "",
                            Residence = "",
                            State = "Texas",
                            StreetAddress = "123 Flicka Flacka Way",
                            Zip = "84040"
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "044d2c3e-b761-47b5-977d-637a09b9e340",
                            Email = "SocialWorker2@SocialWorker2.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SocialWorker2@SocialWorker2.COM",
                            NormalizedUserName = "SocialWorker2@SocialWorker2.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKB9QigK3DiVVE5XYmSM7ev7q2D91cxPVnbn7tWDU+e58hUss2Txmi7/5GzV2gZ7YA==",
                            PhoneNumber = "800calladmin",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d4fb098-23b1-4219-8b4c-c146830ede28",
                            TwoFactorEnabled = false,
                            UserName = "SocialWorker2@SocialWorker2.com",
                            Address = "123 Flicka Flacka Way",
                            ApplicationUserId = "8e445865-a24d-4543-a6c6-9443d048cdb7",
                            BirthDate = new DateTime(2022, 12, 13, 10, 16, 16, 712, DateTimeKind.Local).AddTicks(280),
                            City = "Jonestown",
                            County = "Davis",
                            Education = "",
                            FirstName = "Miachael",
                            Gender = "",
                            Income = "",
                            LastName = "Bluth",
                            Military = "",
                            PostalCode = "84040",
                            Race = "",
                            Residence = "",
                            State = "Texas",
                            StreetAddress = "123 Flicka Flacka Way",
                            Zip = "84040"
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b982316-38c0-4889-9740-e9dc20e3e4cc",
                            Email = "Instructor1@Instructor1.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "Instructor1@Instructor1.COM",
                            NormalizedUserName = "Instructor1@Instructor1.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJw8uoq9p5qFe0Ls20aOegW5RAg0f/hJ6Q2SCMrRIu9pAqspPu9plvEAXU14TBPu2g==",
                            PhoneNumber = "800calladmin",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d4fb098-23b1-4219-8b4c-c146830ede28",
                            TwoFactorEnabled = false,
                            UserName = "Instructor1@Instructor1.com",
                            Address = "123 Flicka Flacka Way",
                            ApplicationUserId = "8e445865-a24d-4543-a6c6-9443d048cdb6",
                            BirthDate = new DateTime(2022, 12, 13, 10, 16, 16, 713, DateTimeKind.Local).AddTicks(3533),
                            City = "Jonestown",
                            County = "Davis",
                            Education = "",
                            FirstName = "Gob",
                            Gender = "",
                            Income = "",
                            LastName = "Gobbo",
                            Military = "",
                            PostalCode = "84040",
                            Race = "",
                            Residence = "",
                            State = "Texas",
                            StreetAddress = "123 Flicka Flacka Way",
                            Zip = "84040"
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "56c189f9-c3eb-4113-8934-5196f6a60920",
                            Email = "Instructor2@Instructor2.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "Instructor2@Instructor2.COM",
                            NormalizedUserName = "Instructor2@Instructor2.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELLVp37XyL/mP645/eeFB4ClMHN/ds5JoVdqC7os6khy7JFzvkBTY5YZDovazCF3sw==",
                            PhoneNumber = "800calladmin",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d4fb098-23b1-4219-8b4c-c146830ede28",
                            TwoFactorEnabled = false,
                            UserName = "Instructor2@Instructor2.com",
                            Address = "123 Flicka Flacka Way",
                            ApplicationUserId = "8e445865-a24d-4543-a6c6-9443d048cdb5",
                            BirthDate = new DateTime(2022, 12, 13, 10, 16, 16, 714, DateTimeKind.Local).AddTicks(6743),
                            City = "Jonestown",
                            County = "Davis",
                            Education = "",
                            FirstName = "MrTeacher",
                            Gender = "",
                            Income = "",
                            LastName = "MrTeacher",
                            Military = "",
                            PostalCode = "84040",
                            Race = "",
                            Residence = "",
                            State = "Texas",
                            StreetAddress = "123 Flicka Flacka Way",
                            Zip = "84040"
                        });
                });

            modelBuilder.Entity("Idea_Pending_SMART.Models.Class", b =>
                {
                    b.HasOne("Idea_Pending_SMART.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Idea_Pending_SMART.Models.ClassTime", "ClassTime")
                        .WithMany()
                        .HasForeignKey("ClassTimeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Idea_Pending_SMART.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Idea_Pending_SMART.Models.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("ClassTime");

                    b.Navigation("Course");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("Idea_Pending_SMART.Models.Enrollment", b =>
                {
                    b.HasOne("Idea_Pending_SMART.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Idea_Pending_SMART.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Idea_Pending_SMART.Models.RolePermission", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "IdentityRole")
                        .WithMany()
                        .HasForeignKey("IdentityRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Idea_Pending_SMART.Models.Permissions", "Permissions")
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityRole");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Idea_Pending_SMART.Models.Semester", b =>
                {
                    b.HasOne("Idea_Pending_SMART.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
